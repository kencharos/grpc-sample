// Code generated by protoc-gen-go. DO NOT EDIT.
// source: my/rpc/fizbuz.proto

package my_rpc

import (
	_ "../../validator"
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type InputNumber struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InputNumber) Reset()         { *m = InputNumber{} }
func (m *InputNumber) String() string { return proto.CompactTextString(m) }
func (*InputNumber) ProtoMessage()    {}
func (*InputNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_3329192c833548b0, []int{0}
}

func (m *InputNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InputNumber.Unmarshal(m, b)
}
func (m *InputNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InputNumber.Marshal(b, m, deterministic)
}
func (m *InputNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InputNumber.Merge(m, src)
}
func (m *InputNumber) XXX_Size() int {
	return xxx_messageInfo_InputNumber.Size(m)
}
func (m *InputNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_InputNumber.DiscardUnknown(m)
}

var xxx_messageInfo_InputNumber proto.InternalMessageInfo

func (m *InputNumber) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type FromTo struct {
	FromTo               int32    `protobuf:"varint,1,opt,name=fromTo,proto3" json:"fromTo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FromTo) Reset()         { *m = FromTo{} }
func (m *FromTo) String() string { return proto.CompactTextString(m) }
func (*FromTo) ProtoMessage()    {}
func (*FromTo) Descriptor() ([]byte, []int) {
	return fileDescriptor_3329192c833548b0, []int{1}
}

func (m *FromTo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FromTo.Unmarshal(m, b)
}
func (m *FromTo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FromTo.Marshal(b, m, deterministic)
}
func (m *FromTo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FromTo.Merge(m, src)
}
func (m *FromTo) XXX_Size() int {
	return xxx_messageInfo_FromTo.Size(m)
}
func (m *FromTo) XXX_DiscardUnknown() {
	xxx_messageInfo_FromTo.DiscardUnknown(m)
}

var xxx_messageInfo_FromTo proto.InternalMessageInfo

func (m *FromTo) GetFromTo() int32 {
	if m != nil {
		return m.FromTo
	}
	return 0
}

type FizBuzAnswer struct {
	Answer               string   `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FizBuzAnswer) Reset()         { *m = FizBuzAnswer{} }
func (m *FizBuzAnswer) String() string { return proto.CompactTextString(m) }
func (*FizBuzAnswer) ProtoMessage()    {}
func (*FizBuzAnswer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3329192c833548b0, []int{2}
}

func (m *FizBuzAnswer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FizBuzAnswer.Unmarshal(m, b)
}
func (m *FizBuzAnswer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FizBuzAnswer.Marshal(b, m, deterministic)
}
func (m *FizBuzAnswer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FizBuzAnswer.Merge(m, src)
}
func (m *FizBuzAnswer) XXX_Size() int {
	return xxx_messageInfo_FizBuzAnswer.Size(m)
}
func (m *FizBuzAnswer) XXX_DiscardUnknown() {
	xxx_messageInfo_FizBuzAnswer.DiscardUnknown(m)
}

var xxx_messageInfo_FizBuzAnswer proto.InternalMessageInfo

func (m *FizBuzAnswer) GetAnswer() string {
	if m != nil {
		return m.Answer
	}
	return ""
}

type FizBuzList struct {
	Answer               []string `protobuf:"bytes,1,rep,name=answer,proto3" json:"answer,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FizBuzList) Reset()         { *m = FizBuzList{} }
func (m *FizBuzList) String() string { return proto.CompactTextString(m) }
func (*FizBuzList) ProtoMessage()    {}
func (*FizBuzList) Descriptor() ([]byte, []int) {
	return fileDescriptor_3329192c833548b0, []int{3}
}

func (m *FizBuzList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FizBuzList.Unmarshal(m, b)
}
func (m *FizBuzList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FizBuzList.Marshal(b, m, deterministic)
}
func (m *FizBuzList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FizBuzList.Merge(m, src)
}
func (m *FizBuzList) XXX_Size() int {
	return xxx_messageInfo_FizBuzList.Size(m)
}
func (m *FizBuzList) XXX_DiscardUnknown() {
	xxx_messageInfo_FizBuzList.DiscardUnknown(m)
}

var xxx_messageInfo_FizBuzList proto.InternalMessageInfo

func (m *FizBuzList) GetAnswer() []string {
	if m != nil {
		return m.Answer
	}
	return nil
}

func init() {
	proto.RegisterType((*InputNumber)(nil), "my.rpc.InputNumber")
	proto.RegisterType((*FromTo)(nil), "my.rpc.FromTo")
	proto.RegisterType((*FizBuzAnswer)(nil), "my.rpc.FizBuzAnswer")
	proto.RegisterType((*FizBuzList)(nil), "my.rpc.FizBuzList")
}

func init() { proto.RegisterFile("my/rpc/fizbuz.proto", fileDescriptor_3329192c833548b0) }

var fileDescriptor_3329192c833548b0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xad, 0xd4, 0x2f,
	0x2a, 0x48, 0xd6, 0x4f, 0xcb, 0xac, 0x4a, 0x2a, 0xad, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0x62, 0xcb, 0xad, 0xd4, 0x2b, 0x2a, 0x48, 0x96, 0x92, 0x49, 0xcf, 0xcf, 0x4f, 0xcf, 0x49, 0xd5,
	0x4f, 0x2c, 0xc8, 0xd4, 0x4f, 0xcc, 0xcb, 0xcb, 0x2f, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0x2b, 0x86,
	0xa8, 0x92, 0x92, 0x2c, 0x4b, 0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0xd2, 0x87, 0xb3, 0x20,
	0x52, 0x4a, 0xda, 0x5c, 0xdc, 0x9e, 0x79, 0x05, 0xa5, 0x25, 0x7e, 0xa5, 0xb9, 0x49, 0xa9, 0x45,
	0x42, 0x32, 0x5c, 0xcc, 0x79, 0xa5, 0xb9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x4e, 0x5c, 0x4d,
	0x5b, 0x25, 0x98, 0x04, 0x52, 0xba, 0xb6, 0x4a, 0x30, 0x04, 0x81, 0x84, 0x95, 0x14, 0xb8, 0xd8,
	0xdc, 0x8a, 0xf2, 0x73, 0x43, 0xf2, 0x85, 0xc4, 0xb8, 0xd8, 0xd2, 0xc0, 0x2c, 0x88, 0xd2, 0x20,
	0x28, 0x4f, 0x49, 0x8d, 0x8b, 0xc7, 0x2d, 0xb3, 0xca, 0xa9, 0xb4, 0xca, 0x31, 0xaf, 0xb8, 0x3c,
	0xb5, 0x08, 0xa4, 0x2e, 0x11, 0xcc, 0x02, 0xab, 0xe3, 0x0c, 0x82, 0xf2, 0x94, 0x54, 0xb8, 0xb8,
	0x20, 0xea, 0x7c, 0x32, 0x8b, 0x4b, 0x50, 0x54, 0x31, 0x23, 0x54, 0x19, 0x4d, 0x62, 0xe2, 0xe2,
	0x85, 0x28, 0x0b, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x15, 0xf2, 0xe5, 0xe2, 0x84, 0x08, 0xf8,
	0xe7, 0xa5, 0x0a, 0x09, 0xeb, 0x41, 0x7c, 0xaf, 0x87, 0xe4, 0x03, 0x29, 0x11, 0x98, 0x20, 0xb2,
	0x3b, 0x94, 0x44, 0x9b, 0x2e, 0x3f, 0x99, 0xcc, 0xc4, 0x2f, 0xc4, 0x0b, 0x0d, 0x3e, 0xfd, 0xea,
	0xbc, 0xd2, 0xdc, 0x5a, 0x21, 0x73, 0x2e, 0x6e, 0x88, 0xb2, 0xa0, 0xc4, 0xbc, 0xf4, 0x54, 0x21,
	0x3e, 0xb8, 0x5e, 0xb0, 0x6f, 0x70, 0x98, 0xc5, 0x60, 0xc0, 0x28, 0x64, 0x05, 0xd3, 0xe8, 0x94,
	0x58, 0x92, 0x9c, 0x81, 0xdd, 0x25, 0x42, 0xa8, 0xba, 0x41, 0x3e, 0x55, 0x62, 0xd0, 0x60, 0x14,
	0xb2, 0x85, 0xf9, 0xdd, 0x37, 0x31, 0xaf, 0x92, 0x14, 0x4f, 0x30, 0x68, 0x30, 0x1a, 0x30, 0x3a,
	0x71, 0x71, 0x41, 0x23, 0x3d, 0x80, 0x31, 0x89, 0x0d, 0x1c, 0x89, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x41, 0x9a, 0xc8, 0x66, 0x1c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FizBuzServiceClient is the client API for FizBuzService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FizBuzServiceClient interface {
	FizBuzOne(ctx context.Context, in *InputNumber, opts ...grpc.CallOption) (*FizBuzAnswer, error)
	FizBuzRange(ctx context.Context, in *FromTo, opts ...grpc.CallOption) (FizBuzService_FizBuzRangeClient, error)
	FizBuzBatch(ctx context.Context, opts ...grpc.CallOption) (FizBuzService_FizBuzBatchClient, error)
	FizBuzMany(ctx context.Context, opts ...grpc.CallOption) (FizBuzService_FizBuzManyClient, error)
}

type fizBuzServiceClient struct {
	cc *grpc.ClientConn
}

func NewFizBuzServiceClient(cc *grpc.ClientConn) FizBuzServiceClient {
	return &fizBuzServiceClient{cc}
}

func (c *fizBuzServiceClient) FizBuzOne(ctx context.Context, in *InputNumber, opts ...grpc.CallOption) (*FizBuzAnswer, error) {
	out := new(FizBuzAnswer)
	err := c.cc.Invoke(ctx, "/my.rpc.FizBuzService/FizBuzOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fizBuzServiceClient) FizBuzRange(ctx context.Context, in *FromTo, opts ...grpc.CallOption) (FizBuzService_FizBuzRangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizBuzService_serviceDesc.Streams[0], "/my.rpc.FizBuzService/FizBuzRange", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizBuzServiceFizBuzRangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FizBuzService_FizBuzRangeClient interface {
	Recv() (*FizBuzAnswer, error)
	grpc.ClientStream
}

type fizBuzServiceFizBuzRangeClient struct {
	grpc.ClientStream
}

func (x *fizBuzServiceFizBuzRangeClient) Recv() (*FizBuzAnswer, error) {
	m := new(FizBuzAnswer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fizBuzServiceClient) FizBuzBatch(ctx context.Context, opts ...grpc.CallOption) (FizBuzService_FizBuzBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizBuzService_serviceDesc.Streams[1], "/my.rpc.FizBuzService/FizBuzBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizBuzServiceFizBuzBatchClient{stream}
	return x, nil
}

type FizBuzService_FizBuzBatchClient interface {
	Send(*InputNumber) error
	CloseAndRecv() (*FizBuzList, error)
	grpc.ClientStream
}

type fizBuzServiceFizBuzBatchClient struct {
	grpc.ClientStream
}

func (x *fizBuzServiceFizBuzBatchClient) Send(m *InputNumber) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fizBuzServiceFizBuzBatchClient) CloseAndRecv() (*FizBuzList, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(FizBuzList)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fizBuzServiceClient) FizBuzMany(ctx context.Context, opts ...grpc.CallOption) (FizBuzService_FizBuzManyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_FizBuzService_serviceDesc.Streams[2], "/my.rpc.FizBuzService/FizBuzMany", opts...)
	if err != nil {
		return nil, err
	}
	x := &fizBuzServiceFizBuzManyClient{stream}
	return x, nil
}

type FizBuzService_FizBuzManyClient interface {
	Send(*InputNumber) error
	Recv() (*FizBuzAnswer, error)
	grpc.ClientStream
}

type fizBuzServiceFizBuzManyClient struct {
	grpc.ClientStream
}

func (x *fizBuzServiceFizBuzManyClient) Send(m *InputNumber) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fizBuzServiceFizBuzManyClient) Recv() (*FizBuzAnswer, error) {
	m := new(FizBuzAnswer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FizBuzServiceServer is the server API for FizBuzService service.
type FizBuzServiceServer interface {
	FizBuzOne(context.Context, *InputNumber) (*FizBuzAnswer, error)
	FizBuzRange(*FromTo, FizBuzService_FizBuzRangeServer) error
	FizBuzBatch(FizBuzService_FizBuzBatchServer) error
	FizBuzMany(FizBuzService_FizBuzManyServer) error
}

func RegisterFizBuzServiceServer(s *grpc.Server, srv FizBuzServiceServer) {
	s.RegisterService(&_FizBuzService_serviceDesc, srv)
}

func _FizBuzService_FizBuzOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InputNumber)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FizBuzServiceServer).FizBuzOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/my.rpc.FizBuzService/FizBuzOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FizBuzServiceServer).FizBuzOne(ctx, req.(*InputNumber))
	}
	return interceptor(ctx, in, info, handler)
}

func _FizBuzService_FizBuzRange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FromTo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FizBuzServiceServer).FizBuzRange(m, &fizBuzServiceFizBuzRangeServer{stream})
}

type FizBuzService_FizBuzRangeServer interface {
	Send(*FizBuzAnswer) error
	grpc.ServerStream
}

type fizBuzServiceFizBuzRangeServer struct {
	grpc.ServerStream
}

func (x *fizBuzServiceFizBuzRangeServer) Send(m *FizBuzAnswer) error {
	return x.ServerStream.SendMsg(m)
}

func _FizBuzService_FizBuzBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FizBuzServiceServer).FizBuzBatch(&fizBuzServiceFizBuzBatchServer{stream})
}

type FizBuzService_FizBuzBatchServer interface {
	SendAndClose(*FizBuzList) error
	Recv() (*InputNumber, error)
	grpc.ServerStream
}

type fizBuzServiceFizBuzBatchServer struct {
	grpc.ServerStream
}

func (x *fizBuzServiceFizBuzBatchServer) SendAndClose(m *FizBuzList) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fizBuzServiceFizBuzBatchServer) Recv() (*InputNumber, error) {
	m := new(InputNumber)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FizBuzService_FizBuzMany_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FizBuzServiceServer).FizBuzMany(&fizBuzServiceFizBuzManyServer{stream})
}

type FizBuzService_FizBuzManyServer interface {
	Send(*FizBuzAnswer) error
	Recv() (*InputNumber, error)
	grpc.ServerStream
}

type fizBuzServiceFizBuzManyServer struct {
	grpc.ServerStream
}

func (x *fizBuzServiceFizBuzManyServer) Send(m *FizBuzAnswer) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fizBuzServiceFizBuzManyServer) Recv() (*InputNumber, error) {
	m := new(InputNumber)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _FizBuzService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "my.rpc.FizBuzService",
	HandlerType: (*FizBuzServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FizBuzOne",
			Handler:    _FizBuzService_FizBuzOne_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FizBuzRange",
			Handler:       _FizBuzService_FizBuzRange_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FizBuzBatch",
			Handler:       _FizBuzService_FizBuzBatch_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FizBuzMany",
			Handler:       _FizBuzService_FizBuzMany_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "my/rpc/fizbuz.proto",
}
