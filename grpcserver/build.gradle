buildscript {
	repositories {
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.8'
	}
}

plugins {
	id 'org.springframework.boot' version '2.1.2.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.google.protobuf'
apply plugin: "idea"

group = 'my'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

def reactiveGrpcVersion = '0.9.0'
def grpcVersion = '1.18.0'
def protobufVersion = '3.6.1'

repositories {
	mavenCentral()
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	// https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client
	compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-client', version: '2.1.0.RELEASE'

	runtimeOnly 'org.springframework.boot:spring-boot-devtools'

	compile "com.google.protobuf:protobuf-java:${protobufVersion}"
	compile "io.grpc:grpc-stub:${grpcVersion}"
	compile "io.grpc:grpc-protobuf:${grpcVersion}"
	compile "com.salesforce.servicelibs:reactor-grpc-stub:${reactiveGrpcVersion}"
	compile 'io.github.lognet:grpc-spring-boot-starter:3.1.0'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'
}

task cleanProtoGen{
	doFirst{
		delete protobuf.generatedFilesBaseDir
	}
}
clean.dependsOn cleanProtoGen

protobuf {
	protoc {
		// The artifact spec for the Protobuf Compiler
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	plugins {
		grpc { // grpc plugin の取得設定
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
		reactor { // reactor pluginの取得設定
			artifact = "com.salesforce.servicelibs:reactor-grpc:${reactiveGrpcVersion}:jdk8@jar"
		}
	}
	generateProtoTasks { //plugin を動かす最小設定。
		all()*.plugins {
			grpc {} // grpc plugin を使って、サービスクラスの生成を行う。デフォルトでは　grpc というソースセットに生成
			reactor{} // reactor plugin を使って、Reactor 対応の クラス生成を行う。　デフォルトでは reactor というソースセットに生成
		}
		// Note. generateProtoTasks を記述しない場合は、デフォルトの javaタスクのみが実行され、protobuf のjava生成（メッセージクラスの生成）だけが実行される
	}
	// 出力先の設定。デフォルトは build/generated/source なので、ソース管理したい場合などは変更できる
	//generatedFilesBaseDir = "$projectDir/gen"

	/* 各 plugin の出力先を同じにする例
	generateProtoTasks {

		all().each { task ->
			task.builtins {
				java { // java は protobuf(Messageクラス) の出力タスク
					outputSubDir = 'generated-proto'
				}
			}
			task.plugins {
				grpc { // grpc は、Gprcサービスの出力タスク
					outputSubDir = 'generated-proto'
				}
			}
			task.plugins {
				reactor { // reactor は Reactor-Grpcの出力タスク
					outputSubDir = 'generated-proto'
				}
			}
		}
	}
	// 出力先を srcの下へ
	generatedFilesBaseDir = "${projectDir}/src/"
	*/
}
